// <auto-generated />
using System;
using Biblioteka.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteka.Migrations
{
    [DbContext(typeof(BibContext))]
    partial class BibContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 30);

            modelBuilder.Entity("Biblioteka.Areas.Identity.Data.BibUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Property<int>("authorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("nickname")
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("authorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ISBN")
                        .HasColumnType("NUMERIC(13)");

                    b.Property<int>("alley")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<int>("availableCopys")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("floor")
                        .HasColumnType("NUMERIC(1)");

                    b.Property<int>("genreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("publisherId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ratingAVG")
                        .HasColumnType("NUMERIC(3,2)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("rowNumber")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("typeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("bookId");

                    b.HasIndex("genreId");

                    b.HasIndex("publisherId");

                    b.HasIndex("typeId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Biblioteka.Models.BookType", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("typeId");

                    b.ToTable("BookType");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Author", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("authorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("bookId", "authorId");

                    b.HasIndex("authorId");

                    b.ToTable("Book_Author", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Opinions", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("readerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("addedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("opinion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("rating")
                        .HasColumnType("NUMERIC(3,2)");

                    b.HasKey("bookId", "readerId");

                    b.HasIndex("readerId");

                    b.ToTable("Book_Opinions", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Tag", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("bookId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("Book_Tag", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.Property<int>("borrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("TEXT");

                    b.Property<int>("bookId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("bookLost")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("borrowDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("employeeConfirmingPaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("employeeConfirmingReturnId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("employeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("plannedReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("returnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("borrowId");

                    b.HasIndex("bookId");

                    b.HasIndex("employeeConfirmingPaymentId");

                    b.HasIndex("employeeConfirmingReturnId")
                        .HasDatabaseName("IX_Borrowing_employeeConfirm~1");

                    b.HasIndex("employeeId");

                    b.ToTable("Borrowing");
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.Property<int>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("dateOfEmployment")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("positionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("employeeId");

                    b.HasIndex("positionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingPayment", b =>
                {
                    b.Property<int>("employeeConfirmingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("employeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("employeeConfirmingPaymentId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeConfirmingPaymentsBook");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingReturn", b =>
                {
                    b.Property<int>("employeeConfirmingReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("employeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("employeeConfirmingReturnId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeConfirmingReturnsBook");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeData", b =>
                {
                    b.Property<int>("employeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("houseNumber")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<long?>("pesel")
                        .IsRequired()
                        .HasColumnType("NUMERIC(11)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("NUMERIC(9)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("town")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.HasKey("employeeId");

                    b.ToTable("EmployeeData");
                });

            modelBuilder.Entity("Biblioteka.Models.Event", b =>
                {
                    b.Property<int>("eventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("authorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("eventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("eventId");

                    b.HasIndex("authorId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Biblioteka.Models.FAQ", b =>
                {
                    b.Property<int>("FAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("FAQId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Property<int>("genreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("genreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Biblioteka.Models.Position", b =>
                {
                    b.Property<int>("positionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("salary")
                        .HasColumnType("NUMERIC(4)");

                    b.HasKey("positionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Property<int>("publisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("publisherId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader", b =>
                {
                    b.Property<int>("readerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysBeforeReturn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<bool>("isAuthor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("readerId");

                    b.ToTable("Reader");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader_Borrowings", b =>
                {
                    b.Property<int>("readerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("borrowId")
                        .HasColumnType("INTEGER");

                    b.HasKey("readerId", "borrowId");

                    b.HasIndex("borrowId");

                    b.ToTable("Reader_Borrowings", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Room", b =>
                {
                    b.Property<int>("roomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("seatCount")
                        .HasColumnType("NUMERIC(2)");

                    b.HasKey("roomNumber");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Biblioteka.Models.RoomReservation", b =>
                {
                    b.Property<int>("reservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("begginingOfReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("employeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("endOfReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("readerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roomNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("reservationId");

                    b.HasIndex("employeeId");

                    b.HasIndex("readerId");

                    b.HasIndex("roomNumber");

                    b.ToTable("RoomReservation");
                });

            modelBuilder.Entity("Biblioteka.Models.Tag", b =>
                {
                    b.Property<int>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("tagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.HasOne("Biblioteka.Models.Genre", "genre")
                        .WithMany("books")
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Publisher", "publisher")
                        .WithMany("books")
                        .HasForeignKey("publisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.BookType", "type")
                        .WithMany("books")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genre");

                    b.Navigation("publisher");

                    b.Navigation("type");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Author", b =>
                {
                    b.HasOne("Biblioteka.Models.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("authors")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Opinions", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("opinions")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("bookOpinions")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("reader");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Tag", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("tags")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Tag", "tag")
                        .WithMany("books")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("borrowings")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.EmployeeConfirmingPayment", "employeeConfirmingPayment")
                        .WithMany()
                        .HasForeignKey("employeeConfirmingPaymentId");

                    b.HasOne("Biblioteka.Models.EmployeeConfirmingReturn", "employeeConfirmingReturn")
                        .WithMany()
                        .HasForeignKey("employeeConfirmingReturnId")
                        .HasConstraintName("FK_Borrowing_EmployeeConfirm~1");

                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("borrowings")
                        .HasForeignKey("employeeId");

                    b.Navigation("book");

                    b.Navigation("employee");

                    b.Navigation("employeeConfirmingPayment");

                    b.Navigation("employeeConfirmingReturn");
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.HasOne("Biblioteka.Models.Position", "position")
                        .WithMany("employees")
                        .HasForeignKey("positionId");

                    b.Navigation("position");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingPayment", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("paymentConfirmation")
                        .HasForeignKey("employeeId");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingReturn", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("returnConfirmations")
                        .HasForeignKey("employeeId");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeData", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithOne("employeeData")
                        .HasForeignKey("Biblioteka.Models.EmployeeData", "employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.Event", b =>
                {
                    b.HasOne("Biblioteka.Models.Author", "author")
                        .WithMany("events")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader_Borrowings", b =>
                {
                    b.HasOne("Biblioteka.Models.Borrowing", "borrow")
                        .WithMany("readers")
                        .HasForeignKey("borrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("borrowings")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrow");

                    b.Navigation("reader");
                });

            modelBuilder.Entity("Biblioteka.Models.RoomReservation", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("reservations")
                        .HasForeignKey("employeeId");

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("reservations")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Room", "room")
                        .WithMany("reservations")
                        .HasForeignKey("roomNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("reader");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Navigation("books");

                    b.Navigation("events");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Navigation("authors");

                    b.Navigation("borrowings");

                    b.Navigation("opinions");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("Biblioteka.Models.BookType", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.Navigation("readers");
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.Navigation("borrowings");

                    b.Navigation("employeeData");

                    b.Navigation("paymentConfirmation");

                    b.Navigation("reservations");

                    b.Navigation("returnConfirmations");
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Position", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader", b =>
                {
                    b.Navigation("bookOpinions");

                    b.Navigation("borrowings");

                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Biblioteka.Models.Room", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Biblioteka.Models.Tag", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
